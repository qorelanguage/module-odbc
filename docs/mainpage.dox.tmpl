/** @mainpage Qore ODBC Module

    @tableofcontents

    Contents of this documentation:
    - @ref odbcintro
    - @ref odbcoptions
    - @ref odbctrans
    - @ref odbcbind
    - @ref odbcstoredprocs
    - @ref odbcreleasenotes

    @section odbcintro Introduction to the ODBC Module

    The odbc module provides an ODBC driver to Qore's DBI system, allowing Qore programs to access many different databases using the ODBC interface through the Datasource, DatasourcePool, and SQLStatement classes.

    This module is released under the MIT license (see COPYING.txt in the source distribution for more information).
    .
    The module is tagged as such in the module's header (meaning it can be loaded unconditionally regardless of how the %Qore library was initialized).

    Example of creating an ODBC Datasource:
    @code
# Using DSN-less connection.
Datasource db = new Datasource(SQL::DSODBC, user, pass, NOTHING, "UTF8", NOTHING,
    NOTHING, {"DRIVER": "MySQL ODBC 5.3 Unicode Driver", "Server": "192.168.20.1", "Database": "omquser"});

# Using DSN connection.
Datasource db = new Datasource(SQL::DSODBC, user, pass, dsn, "UTF8");
    @endcode

    This driver supports the following DBI capabilities:
    - \c DBI_CAP_TIME_ZONE_SUPPORT
    - \c DBI_CAP_TRANSACTION_MANAGEMENT
    - \c DBI_CAP_CHARSET_SUPPORT
    - \c DBI_CAP_LOB_SUPPORT
    - \c DBI_CAP_STORED_PROCEDURES
    - \c DBI_CAP_BIND_BY_VALUE
    - \c DBI_CAP_HAS_ARRAY_BIND
    - \c DBI_CAP_HAS_EXECRAW
    - \c DBI_CAP_HAS_STATEMENT
    - \c DBI_CAP_HAS_SELECT_ROW
    - \c DBI_CAP_HAS_NUMBER_SUPPORT
    - \c DBI_CAP_HAS_OPTION_SUPPORT
    - \c DBI_CAP_SERVER_TIME_ZONE

    The driver employs efficient binary bindings for all non-text data types and fully supports multidimensional arrays when selecting and binding by value.

    The Datasource::getServerVersion() method is implemented for this driver and returns an integer giving the major, minor, and sub version numbers in a single integer according to the following formula:

    @verbatim
major_version * 1000000 + minor_version * 10000 + sub_version
    @endverbatim

    (For example: \c 5030025 = <tt>5.3.25</tt>).

    The Datasource::getClientVersion() method is implemented the same way as Datasource::getServerVersion() and returns the version of the specific ODBC driver used for a connection.

    The return value is equal to the return value of the getServerVersion() method described above.

    (For example: \c 3010672 = <tt>3.1.672</tt>).

    Like all Qore components, the ODBC DBI driver is thread-safe.

    @section odbcoptions Driver Options

    The odbc driver supports the following DBI options:
    - \c "optimal-numbers": return numeric types as an integer if possible, if not return them as an arbitrary-precision number
    - \c "string-numbers": return numeric types as strings (for backwards-compatibility)
    - \c "numeric-numbers": return numeric types as arbitrary-precision number values

    Options can be set in the \c Datasource or \c DatasourcePool constructors as in the following examples:
    @code
    Dataource ds("odbc:user/pass@dsn{numeric-numbers}");
    DataourcePool dsp("odbc:user/pass@{optimal-numbers,DRIVER=MySQL ODBC 5.3 Unicode Driver,Server=192.168.20.1,Database=omquser}");
    @endcode

    Options are stored separately for each connection.

    @subsection odbc_number_options Number Options

    The number options (\c "optimal-numbers", \c "string-numbers", and \c "numeric-numbers") are all mutually-exclusive; setting one automatically disables the others.   These options also ignore their arguments; the last one set takes effect (also note that setting it with any value sets the option, even @ref False).

    The default if no other option is explicitly set is \c "optimal-numbers".  Note that this represents a change from previous versions where \c NUMERIC or \c DECIMAL values were returned as strings in order to avoid the loss of information.  To set the old behavior, set the \c "string-numbers" option when creating the \c Datasource or \c DatasourcePool object.

    @section odbctrans Transaction Management

    When using ODBC, all the transactions are started implicitly by executing any command, therefore it is not necessary to do this manually.

    An exception in a Datasource::exec() method as the first statement of a transaction will cause an automatic implicit \c "rollback" to be executed to maintain compatibility with other Qore DBI drivers.

    @section odbcbind Binding and Types

    For \c NUMERIC columns, the %d specification in the query string can be used to substitute a numeric value or a literal null directly in the query string, providing the same effect as a bind by value in a very convenient form for the programmer. For example:

    @code
# the %d will be substituted with the value of \c id directly in the query text
# or with a "null" in case \c id has no value (or is NULL)
*hash results = db.select("select * from table where id = %d", id);
    @endcode

    Due to the fact that Qore date/time values support time zone information, when PostgreSQL data including a time zone component is converted to a Qore data type, the time zone information is also maintained. Also, Qore date/time values support a microsecond resolution, matching PostgreSQL's microsecond support, so this information is also maintained.

    Note that binding by placeholder is not required or supported by this driver as PostgreSQL returns values directly; Qore DBI placeholder buffer specifications are ignored when the odbc driver is used.

    When binding arrays, all data types in the Qore list must be identical.

    When retrieving ODBC data, ODBC types are converted to Qore types as per @ref odbc_to_qore.

    @subsection odbc_timezone Time Zone Support

    The driver now sets the server's time zone rules when the connection is established; this is taken from the current time zone settings of the calling Program object and can also be overridden/changed by setting the \c "timezone" driver option (see @ref odbcoptions).

    All date/time values bound by value are converted to the server's time zone before binding to ensure that date/time values are stored correctly in the server.

    When selecting date/time values, the values returned are tagged with the server's time zone.

    Note that the above rules are applied when the current Program's time zone settings are different than the connection's time zone settings at the time when the write operation (bind) read operation (select) is performed.  This is meant to provide consistent support to connecting to a database server in a different time zone.

    @subsection odbc_binding_by_value Binding By Value

    The following table gives data mapping when binding qore types by value.

    |!QoreType|!ODBC C Type|!ODBC SQL Type|!Description
    |\c int|SQL_C_SBIGINT|\c SQL_BIGINT|Converting from a BIGINT type to smaller types is done automatically by the specific ODBC DB driver.
    |\c float|\c SQL_C_DOUBLE|\c SQL_DOUBLE|Qore float data is converted directly to ODBC DOUBLE data.
    |\c number|\c SQL_C_CHAR|\c SQL_CHAR|Qore number data is converted to strings before sending.
    |\c string|\c SQL_C_CHAR, \c SQL_C_WCHAR|\c SQL_CHAR, \c SQL_WCHAR|The character encoding is converted to the encoding specified for the connection if necessary and bound as SQL_CHAR values; if no encoding is specified, strings are converted to UTF-16 instead and bound as SQL_WCHAR strings
    |\c bool|\c SQL_C_BIT|\c SQL_CHAR|Qore boolean values are sourced as BIT values and sent as CHAR values.
    |\c date|\c SQL_C_INTERVAL_DAY_TO_SECOND, \c SQL_C_TYPE_TIMESTAMP|\c SQL_INTERVAL_DAY_TO_SECOND, \c SQL_TYPE_TIMESTAMP|Relative date/time values are bound as interval data, absolute date/time values are bound as timestamp data
    |\c binary|\c SQL_C_BINARY|\c SQL_BINARY|Qore binary data is bound directly as binary data.

    @subsection odbc_to_qore ODBC to Qore Type Mappings
    |!PostgreSQL Type|!Qore Type|!Notes
    |\c SQL_BIT|\c bool|direct conversion
    |\c SQL_BINARY|\c binary|direct conversion
    |\c SQL_VARBINARY|\c binary|direct conversion
    |\c SQL_LONGVARBINARY|\c binary|direct conversion
    |\c SQL_CHAR|\c string|if character encoding is specified, the strings are received and set as Qore strings with the specified encoding; if no encoding is specified, the strings are received as SQL_WCHAR strings instead
    |\c SQL_VARCHAR|\c string|direct conversion
    |\c SQL_LONGVARCHAR|\c string|direct conversion
    |\c SQL_WCHAR|\c string|direct conversion
    |\c SQL_WVARCHAR|\c string|direct conversion
    |\c SQL_WLONGVARCHAR|\c string|direct conversion
    |\c SQL_INTEGER|\c int|direct conversion
    |\c SQL_BIGINT|\c int|direct conversion
    |\c SQL_SMALLINT|\c int|direct conversion
    |\c SQL_TINYINT|\c int|direct conversion
    |\c SQL_FLOAT|\c float|direct conversion
    |\c SQL_DOUBLE|\c float|direct conversion
    |\c SQL_REAL|\c float|direct conversion
    |\c SQL_NUMERIC|\c int, \c string or \c number|depends on driver options
    |\c SQL_DECIMAL|\c int, \c string or \c number|depends on driver options
    |\c SQL_TYPE_DATE|\c date (absolute)|direct conversion
    |\c SQL_TYPE_TIME|\c date (relative)|direct conversion
    |\c SQL_TYPE_TIMESTAMP|\c date (absolute)|direct conversion
    |\c SQL_TYPE_UTCDATETIME| |not supported
    |\c SQL_TYPE_UTCTIME| |not supported
    |\c SQL_INTERVAL_MONTH|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_YEAR|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_YEAR_TO_MONTH|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_HOUR|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_MINUTE|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_SECOND|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY_TO_HOUR|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY_TO_MINUTE|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY_TO_SECOND|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_HOUR_TO_MINUTE|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_HOUR_TO_SECOND|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_MINUTE_TO_SECOND|\c date(relative)|direct conversion
    |\c SQL_GUID|\c string|format: <tt>x-x-x-x.x.x.x.x.x.x.x</tt>

    @section odbcstoredprocs Stored Procedures

    Stored procedure execution is supported; the following is an example of a stored procedure call:

    Example PostgreSQL PLPG/SQL function:
    @code
create or replace function int_test(val int4) returns int4 as $$
begin
    return val * 2;
end;
$$ language plodbc;
   @endcode

   Example Qore code to call this function:
   @code
any result = db.exec("select int_test(%v)", 11);
printf("%N\n", result);
   @endcode

   Resulting in:
   @verbatim
hash: (1 member)
  int_test : 22
   @endverbatim

    @section odbcreleasenotes Release Notes

    @subsection odbcv10 odbc Driver Version 1.0

    - initial release

*/
