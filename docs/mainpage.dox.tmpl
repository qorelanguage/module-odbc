/** @mainpage Qore ODBC Module

    @tableofcontents

    Contents of this documentation:
    - @ref odbcintro
    - @ref odbcoptions
      - @ref odbc_number_options
      - @ref odbc_bigint_options
      - @ref odbc_frprec_option
      - @ref odbc_timeout_options
    - @ref odbctrans
    - @ref odbcbind
      - @ref odbc_timezone
      - @ref odbc_encoding_support
      - @ref odbc_oracle_support
      - @ref odbc_binding_by_value
      - @ref odbc_to_qore
    - @ref odbcstoredprocs
    - @ref odbcreleasenotes

    @section odbcintro Introduction to the ODBC Module

    The odbc module provides an ODBC driver to Qore's DBI system, allowing Qore programs to access many different
    databases using the ODBC interface through the \c Datasource, \c DatasourcePool, and \c SQLStatement classes.

    This module is released under the MIT license (see LICENSE.txt in the source distribution for more information).
    The module is tagged as such in the module's header (meaning it can be loaded unconditionally regardless of how
    the %Qore library was initialized).

    Example of creating an ODBC Datasource using DSN-less connection:
    @code
# Firebird
Datasource db("odbc:user/pass@{conn=driver=firebird;dbname=localhost:/var/lib/firebird/data/employee.fdb");

# MySQL
Datasource db = new Datasource(SQL::DSODBC, user, pass, NOTHING, "UTF8", NOTHING,
    NOTHING, {"conn": "driver=MySQL ODBC 5.3 Unicode Driver;Server=192.168.15.1;Database=omquser"});

# PostgreSQL
db = new Datasource(SQL::DSODBC, user, pass, NOTHING, "UTF8", NOTHING,
    NOTHING, {"conn": "driver=PostgreSQL Unicode;Server=192.168.15.1;Database=omquser", "fractional-precision": 6});

# Oracle
db = new Datasource(SQL::DSODBC, user, pass, NOTHING, NOTHING, NOTHING,
    NOTHING, {"conn": "driver=Oracle 12c ODBC driver;Dbq=192.168.15.1:1521/lorem", "bigint-string": True});

# MS-SQL
db = new Datasource(SQL::DSODBC, user, pass, NOTHING, NOTHING, NOTHING,
    NOTHING, {"conn": "driver=ODBC Driver 11 for SQL Server;Server=192.168.15.1;Database=omquser"});
    @endcode

    Example of creating an ODBC Datasource using DSN connection:
    @code
Datasource db(SQL::DSODBC, user, pass, dsn, "UTF8");
    @endcode

    The ODBC connection string can be given as the \c conn option; if the datasource has a username, it is added as
    both \c USER and \c UID in the connection string, whereas any password is added as both \c PASSWORD and \c PWD in
    the connection string.  To avoid this, use datasource connection parameters without a username or password and add
    the required connection parameters directly to the \c conn option separated by semicolons (\c ";") as in the above
    examples.

    If a database name if provided in the datasource connection arguments, it is added as the \c DSN option in the
    ODBC connection string.

    This driver supports the following DBI capabilities:
    - \c DBI_CAP_TIME_ZONE_SUPPORT
    - \c DBI_CAP_TRANSACTION_MANAGEMENT
    - \c DBI_CAP_CHARSET_SUPPORT
    - \c DBI_CAP_LOB_SUPPORT
    - \c DBI_CAP_STORED_PROCEDURES
    - \c DBI_CAP_BIND_BY_VALUE
    - \c DBI_CAP_HAS_ARRAY_BIND
    - \c DBI_CAP_HAS_EXECRAW
    - \c DBI_CAP_HAS_STATEMENT
    - \c DBI_CAP_HAS_DESCRIBE
    - \c DBI_CAP_HAS_SELECT_ROW
    - \c DBI_CAP_HAS_NUMBER_SUPPORT
    - \c DBI_CAP_HAS_OPTION_SUPPORT
    - \c DBI_CAP_SERVER_TIME_ZONE

    The driver employs efficient binary bindings for all non-text data types and fully supports multidimensional arrays when selecting and binding by value.

    The \c Datasource::getServerVersion() method is implemented for this driver and returns an integer giving the major, minor, and sub version numbers in a single integer according to the following formula:

    @verbatim
major_version * 1000000 + minor_version * 10000 + sub_version
    @endverbatim

    For example: <tt>5030025 => version 5.3.25</tt>

    The \c Datasource::getClientVersion() method is implemented the same way as \c Datasource::getServerVersion() with the same return value format, and returns the version of the specific ODBC driver used for a connection.

    For example: <tt>3010672 => version 3.1.672</tt>

    Like all Qore components, the ODBC DBI driver is thread-safe.

    @section odbcoptions Driver Options

    The odbc driver supports the following DBI options:
    - \c "bigint-native": bind Qore int values as native \c SQL_C_SBIGINT values to ODBC statements; this is the
      default
    - \c "bigint-string": bind Qore int values as \c SQL_C_CHAR values (strings) to ODBC statements
    - \c "conn": the ODBC connection string (ex: \c "driver=xyz;server=abc" etc)
    - \c "fractional-precision": precision to use for the fractional seconds part of date, time, timestamp and
      interval values; in the range 1-9 (default is 3)
    - \c "login-timeout": timeout value in seconds used for logging in to the connection (connecting); possible values
      are integers from 0 up (default is 60); setting the timeout to 0 means to wait indefinitely
    - \c "connection-timeout": timeout value in seconds used for the connection; possible values are integers from 0
      up (default is 60); setting the timeout to 0 means to wait indefinitely
    - \c "numeric-numbers": return received \c SQL_NUMERIC and \c SQL_DECIMAL values as arbitrary-precision numbers
      (Qore number values)
    - \c "optimal-numbers": return received \c SQL_NUMERIC and \c SQL_DECIMAL values as integers if possible, if not
      return them as an arbitrary-precision numbers; this is the default
    - \c "preserve-case": the case of column names will be preserved; by default this is disabled and column names
      are converted to lower-case
    - \c "qore-timezone": accepts a string argument that can be either a region name (ex: \c "Europe/Prague") or a UTC
      offset (ex: \c "+01:00") to set the server's timezone rules; this is useful if connecting to a database server
      in a different timezone; if this option is not set then the server's timezone is assumed to be the same as the
      client's timezone
    - \c "string-numbers": return received \c SQL_NUMERIC and \c SQL_DECIMAL values as strings (for backwards-
      compatibility)

    Options can be set in the \c Datasource or \c DatasourcePool constructors as in the following examples:
    @code
    Datasource ds("odbc:user/pass@dsn{numeric-numbers}");
    DatasourcePool dsp("odbc:user/pass@{optimal-numbers,conn-DRIVER=MySQL ODBC 5.3 Unicode Driver;Server=192.168.20.1;Database=omquser}");
    @endcode

    Options are stored separately for each connection.

    @warning In order to use \c int parameters in commands for the Oracle database, you either need to set the \c "bigint-string" option so that Qore int values are sent as strings instead of as 64bit int values (\c SQL_C_SBIGINT), or you have to bind integer values using \ref odbc_bind() and the \ref odbc_bind_constants "odbc_bind() constants" \c ODBCT_SLONG, \c ODBCT_ULONG, \c ODBCT_SSHORT, \c ODBCT_USHORT, \c ODBCT_STINYINT or \c ODBCT_UTINYINT, and make sure that the integers fit the limits imposed by these types.

    @subsection odbc_number_options Number Options

    The number options (\c "optimal-numbers", \c "string-numbers" and \c "numeric-numbers") are all mutually-exclusive; setting one automatically disables the others. These options also ignore their arguments; the last one set takes effect (also note that setting it with any value sets the option, even False).

    The default if no other option is explicitly set is \c "optimal-numbers".  Note that this represents a change from previous versions where \c NUMERIC or \c DECIMAL values were returned as strings in order to avoid the loss of information.  To set the old behavior, set the \c "string-numbers" option when creating the \c Datasource or \c DatasourcePool object.

    @subsection odbc_bigint_options Bigint Options

    The bigint options (\c "bigint-native" and \c "bigint-string") are mutually-exclusive; setting one automatically disables the other. These options also ignore their arguments; the last one set takes effect (also note that setting it with any value sets the option, even False).

    The default if no other option is explicitly set is \c "bigint-native".

    @subsection odbc_frprec_option Fractional Precision Option

    This option sets how big fractional seconds precision will be used when binding any date, time, timestamp and/or interval parameter with seconds part. The default value is 3. Possible values are 1 to 9.

    @subsection odbc_timeout_options Login Timeout and Connection Timeout Options

    Login timeout option is used to set for how long the ODBC driver should wait during the initial connection phase. Connection timeout option is used to set the timeout for when the connection is open and it stops responding.

    Both of the options have a default value of 60 and can be set to numbers ranging from 0 up. A value of 0 means to wait indefinitely (never time out). Both \c Qore int values and integers in the form of strings can be used to set these options.

    @section odbctrans Transaction Management

    When using ODBC, all the transactions are started implicitly by executing any command, therefore it is not necessary to do this manually.

    An exception in a Datasource::exec() method as the first statement of a transaction will cause an automatic implicit \c "rollback" to be executed to maintain compatibility with other Qore DBI drivers.

    @section odbcbind Binding and Types

    Apart from simply passing values for binding you can also use the \ref odbc_bind() function to specify the type to bind. See \ref odbc_binding_by_value for more information about how types are bound when binding by value with this driver.

    For \c NUMERIC columns, the %d specification in the query string can be used to substitute a numeric value or a literal null directly in the query string, providing the same effect as a bind by value in a very convenient form for the programmer. For example:

    @code
# the %d will be substituted with the value of \c id directly in the query text
# or with a "null" in case \c id has no value (or is NULL)
*hash results = db.select("select * from table where id = %d", id);
    @endcode

    Note that binding by placeholder is not required or supported by this driver; Qore DBI placeholder buffer specifications are ignored when the ODBC driver is used.

    When binding arrays, all data types in the Qore list must be identical.

    When retrieving ODBC data, ODBC types are converted to Qore types as per \ref odbc_to_qore.

    @subsection odbc_timezone Timezone Support

    The driver now sets the server's time zone rules when the connection is established; this is taken from the current time zone settings of the calling Program object and can also be overridden/changed by setting the \c "qore-timezone" driver option (see @ref odbcoptions).

    All date/time values bound by value are converted to the server's time zone before binding to ensure that date/time values are stored correctly in the server.

    When selecting date/time values, the values returned are tagged with the server's time zone.

    Note that the above rules are applied when the current Program's time zone settings are different than the connection's time zone settings at the time when the write operation (bind) read operation (select) is performed.  This is meant to provide consistent support to connecting to a database server in a different time zone.

    @subsection odbc_encoding_support Character Encoding Support

    The \c odbc module uses UTF-8 to transfer strings to and from databases in all cases.  Conversions are made to
    UTF-8 for strings inbound to the DB, if necessary, and all string data retrieved from the DB is tagged as UTF-8 as
    well.

    @subsection odbc_oracle_support Oracle Support

    User of this module can use it to connect to Oracle databases. There is one issue however which is connected to this. This module binds \c Qore int values as \c SQL_C_SBIGINT datatype by default. This does not work with Oracle databases though. To overcome this problem, there are two options:

    1) Use the \c "bigint-string" option when opening an ODBC connection. This causes all \c Qore integer values to be bound and sent to the DB as strings. It is less efficient than binding as bigints but works.

    2) Make sure that the integer values fit the respective numerical limits and use \ref odbc_bind() to bind the integer values as one of the following ODBC datatypes: \c SQL_C_SLONG, \c SQL_C_ULONG, \c SQL_C_SSHORT, \c SQL_C_USHORT, \c SQL_C_STINYINT or \c SQL_C_UTINYINT.

    @see odbc_bind_constants

    @subsection odbc_binding_by_value Binding By Value

    The following table gives data mapping when binding qore types by value.

    |!QoreType|!ODBC C Type|!ODBC SQL Type|!Description
    |\c int|\c SQL_C_SBIGINT, \c SQL_C_CHAR|\c SQL_BIGINT|Converting from a BIGINT type to smaller integer types is \
        done automatically by the specific ODBC DB driver. Qore ints can be bound either as SQL_C_SBIGINT values \
        (default) or as character strings (needed for Oracle database).
    |\c float|\c SQL_C_DOUBLE|\c SQL_DOUBLE|Qore float data is converted directly to ODBC DOUBLE data.
    |\c number|\c SQL_C_CHAR|\c SQL_CHAR|Qore number data is converted to strings before sending.
    |\c string|\c SQL_C_CHAR, \c SQL_C_WCHAR|\c SQL_CHAR, \c SQL_WCHAR|The character encoding is converted to UTF-8 \
        if necessary and bound as SQL_CHAR values
    |\c bool|\c SQL_C_BIT|\c SQL_CHAR|Qore boolean values are sourced as BIT values and sent as CHAR values.
    |\c date|\c SQL_C_INTERVAL_DAY_TO_SECOND, \c SQL_C_TYPE_TIMESTAMP|\c SQL_INTERVAL_DAY_TO_SECOND, \
        \c SQL_TYPE_TIMESTAMP|Relative date/time values are bound as interval data, absolute date/time values are \
        bound as timestamp data
    |\c binary|\c SQL_C_BINARY|\c SQL_BINARY|Qore binary data is bound directly as binary data.

    @subsection odbc_to_qore ODBC to Qore Type Mappings

    |!ODBC Type|!Qore Type|!Notes
    |\c SQL_BIT|\c bool|direct conversion
    |\c SQL_BINARY|\c binary|direct conversion
    |\c SQL_VARBINARY|\c binary|direct conversion
    |\c SQL_LONGVARBINARY|\c binary|direct conversion
    |\c SQL_CHAR|\c string|direct conversion as UTF-8-encoded strings
    |\c SQL_VARCHAR|\c string|direct conversion as UTF-8-encoded strings
    |\c SQL_LONGVARCHAR|\c string|direct conversion as UTF-8-encoded strings
    |\c SQL_WCHAR|\c string|direct conversion as UTF-8-encoded strings
    |\c SQL_WVARCHAR|\c string|direct conversion as UTF-8-encoded strings
    |\c SQL_WLONGVARCHAR|\c string|direct conversion as UTF-8-encoded strings
    |\c SQL_INTEGER|\c int|direct conversion
    |\c SQL_BIGINT|\c int|direct conversion
    |\c SQL_SMALLINT|\c int|direct conversion
    |\c SQL_TINYINT|\c int|direct conversion
    |\c SQL_FLOAT|\c float|direct conversion
    |\c SQL_DOUBLE|\c float|direct conversion
    |\c SQL_REAL|\c float|direct conversion
    |\c SQL_NUMERIC|\c int, \c string or \c number|depends on driver options
    |\c SQL_DECIMAL|\c int, \c string or \c number|depends on driver options
    |\c SQL_TYPE_DATE|\c date (absolute)|direct conversion
    |\c SQL_TYPE_TIME|\c date (relative)|direct conversion
    |\c SQL_TYPE_TIMESTAMP|\c date (absolute)|direct conversion
    |\c SQL_TYPE_UTCDATETIME| |not supported
    |\c SQL_TYPE_UTCTIME| |not supported
    |\c SQL_INTERVAL_MONTH|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_YEAR|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_YEAR_TO_MONTH|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_HOUR|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_MINUTE|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_SECOND|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY_TO_HOUR|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY_TO_MINUTE|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_DAY_TO_SECOND|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_HOUR_TO_MINUTE|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_HOUR_TO_SECOND|\c date(relative)|direct conversion
    |\c SQL_INTERVAL_MINUTE_TO_SECOND|\c date(relative)|direct conversion
    |\c SQL_GUID|\c string|format: <tt>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</tt> (canonical UUID form)

    @section odbcstoredprocs Stored Procedures

    Stored procedure execution is supported; the following is an example of a stored procedure call:

    Example PostgreSQL PLPG/SQL function:
    @code
create or replace function int_test(val int4) returns int4 as $$
begin
    return val * 2;
end;
$$ language plodbc;
    @endcode

    Example Qore code to call this function:
    @code
any result = db.exec("select int_test(%v)", 11);
printf("%N\n", result);
    @endcode

    Resulting in:
    @verbatim
hash: (1 member)
  int_test : 22
    @endverbatim

    @section odbcreleasenotes Release Notes

    @subsection odbcv1_1_1 odbc Driver Version 1.1.1
    - fixed handling character encoding issues; UTF-8 strings are used for binding and retrieving now; eliminated
      special logic for handling UTF-16 strings that caused crashes in some cases
      (<a href="https://github.com/qorelanguage/qore/issues/4615">issue 4615</a>)
    - fixed a bug where the \c conn option would be used to build the connection, but the value was not returned as an
      option value
      (<a href="https://github.com/qorelanguage/qore/issues/4613">issue 4613</a>)

    @subsection odbcv1_1 odbc Driver Version 1.1
    - automatically strip trailing spaces \c from CHAR column values
      (<a href="https://github.com/qorelanguage/qore/issues/4508">issue 4508</a>)
    - updated to run with the latest unixODBC versions
      (<a href="https://github.com/qorelanguage/qore/issues/4507">issue 4507</a>)

    @subsection odbcv1_0 odbc Driver Version 1.0
    - initial release
*/
