/* -*- mode: c++; indent-tabs-mode: nil -*- */
/*
  ql_odbc.qpp

  Qore ODBC module

  ODBC Interface to Qore DBI layer

  Copyright (C) 2016 Qore Technologies s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/

#include <sql.h>
#include <sqlext.h>

#include <qore/Qore.h>

/** @defgroup odbc_bind_constants Type Constants for odbc_bind()
 */
//@{
namespace Qore::odbc;
//! Defines a bind for the ODBC's \c DATE type.
const ODBCT_DATE = SQL_TYPE_DATE;

//! Defines a bind for the ODBC's \c TIME type.
const ODBCT_TIME = SQL_TYPE_TIME;

//! Defines a bind for the ODBC's \c TIMESTAMP type.
const ODBCT_TIMESTAMP = SQL_TYPE_TIMESTAMP;

//! Defines a bind for the ODBC's \c INTERVAL_YEAR type.
const ODBCT_INT_YEAR = SQL_INTERVAL_YEAR;

//! Defines a bind for the ODBC's \c INTERVAL_MONTH type.
const ODBCT_INT_MONTH = SQL_INTERVAL_MONTH;

//! Defines a bind for the ODBC's \c INTERVAL_YEAR_TO_MONTH type.
const ODBCT_INT_YEARMONTH = SQL_INTERVAL_YEAR_TO_MONTH;

//! Defines a bind for the ODBC's \c INTERVAL_DAY type.
const ODBCT_INT_DAY = SQL_INTERVAL_DAY;

//! Defines a bind for the ODBC's \c INTERVAL_HOUR type.
const ODBCT_INT_HOUR = SQL_INTERVAL_HOUR;

//! Defines a bind for the ODBC's \c INTERVAL_ type.
const ODBCT_INT_MINUTE = SQL_INTERVAL_MINUTE;

//! Defines a bind for the ODBC's \c INTERVAL_SECOND type.
const ODBCT_INT_SECOND = SQL_INTERVAL_SECOND;

//! Defines a bind for the ODBC's \c INTERVAL_DAY_TO_HOUR type.
const ODBCT_INT_DAYHOUR = SQL_INTERVAL_DAY_TO_HOUR;

//! Defines a bind for the ODBC's \c INTERVAL_DAY_TO_MINUTE type.
const ODBCT_INT_DAYMINUTE = SQL_INTERVAL_DAY_TO_MINUTE;

//! Defines a bind for the ODBC's \c INTERVAL_DAY_TO_SECOND type.
const ODBCT_INT_DAYSECOND = SQL_INTERVAL_DAY_TO_SECOND;

//! Defines a bind for the ODBC's \c INTERVAL_HOUR_TO_MINUTE type.
const ODBCT_INT_HOURMINUTE = SQL_INTERVAL_HOUR_TO_MINUTE;

//! Defines a bind for the ODBC's \c INTERVAL_HOUR_TO_SECOND type.
const ODBCT_INT_HOURSECOND = SQL_INTERVAL_HOUR_TO_SECOND;

//! Defines a bind for the ODBC's \c INTERVAL_MINUTE_TO_SECOND type.
const ODBCT_INT_MINUTESECOND = SQL_INTERVAL_MINUTE_TO_SECOND;
//@}

/** @defgroup odbc_functions ODBC Functions
 */
//@{
namespace Qore::odbc;
//! Creates a hash data structure understood by the ODBC DBI driver when binding values in SQL queries that allows programmers to directly specify the ODBC data type for the bind.
/** Use the @ref odbc_bind_constants to specify the ODBC data type for the bind. If the value to bind is \c NOTHING or \c NULL, a \c NULL will be bound as the value, regardless of the ODBC type code provided as the first argument.

    @param type the @ref odbc_bind_constants "type code" for the ODBC type to bind
    @param value the value to bind

    @returns The hash returned by the function encodes the desired ODBC type for the bind and the value for binding in the \c "^odbct^" and \c "^value^" keys

    @par Example:
    @code
# we use odbc_bind() to bind a SQL_DATE type by value, otherwise the ODBC module would try to send the date as SQL_TIMESTAMP instead which could change the date value depending on currently set timezone and timezone of the ODBC connection
date d = 2016-1-14;
db.exec("INSERT INTO table_abc (id, dt) VALUES (%v, %v)", 42, odbc_bind(ODBCT_DATE, d));
    @endcode

    @throw DBI:ODBC:BIND-ERROR if the type argument is 0 this exception is raised
 */
hash odbc_bind(softint type, any value) [flags=RET_VALUE_ONLY] {
    if (!type) {
        xsink->raiseException("DBI:ODBC:BIND-ERROR", "expecting type number as first parameter to odbc_bind()");
        return 0;
    }

    QoreHashNode *h = new QoreHashNode;
    h->setKeyValue("^odbct^", new QoreBigIntNode(type), xsink);
    h->setKeyValue("^value^", value ? value->refSelf() : 0, xsink);
    return h;
}
//@}
